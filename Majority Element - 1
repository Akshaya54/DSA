1. Brute Force Approach
Time Complexity: O(NÂ²)

Space Complexity: O(1)

Uses .count() for each element which again loops through the list, leading to quadratic time.

# Brute force: Check count of every element

def major(nums):
    n = len(nums)  # Total number of elements in the list
    for i in nums:  # Loop through each number in the list
        if nums.count(i) > n // 2:  # Count how many times it appears
            return i  # If count is more than n/2, return it

# Input section
nums = list(map(int, input("Enter numbers: ").split()))
print("Majority Element (Brute Force):", major(nums))
Example:
Input: 3 1 3 3 2
Output: 3
Because 3 appears 3 times, which is more than 5 // 2 = 2.

âœ… 2. Better Approach Using Dictionary (HashMap)
Time Complexity: O(N)

Space Complexity: O(N)

We use a dictionary to store counts of each number.

# Better approach: Count frequencies using a dictionary

def major(nums):
    d = {}  # Dictionary to store number:count
    n = len(nums)

    for i in nums:
        if i in d:
            d[i] += 1  # Increment count if already present
        else:
            d[i] = 1   # Otherwise, initialize with 1

    # Check which number has frequency > n/2
    for key, value in d.items():
        if value > n // 2:
            return key

# Input section
nums = list(map(int, input("Enter numbers: ").split()))
print("Majority Element (Dictionary):", major(nums))
